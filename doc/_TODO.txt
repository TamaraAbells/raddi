TODO
====

github repo:
 - raddi-builds-windows
   - release - installer exe in release, separated exe/dlls in subdirs
   - portable

commands: loglevels
commands: optimize

classification on db insert

raddi.com: simple reading support

report bad inputs (from source) in node

tables: test and fix shard splitting
tables: add code for client app to process external changes, see 'process' member function
tables: test db erase function
tables: evaluate proper size limits so the index files fit exactly within whole multiples of a typical cluster size

perfect compression dictionary for english text
 - https://sourceforge.net/p/lzmautils/discussion/708858/thread/e40fbf99/
 - 1) open reddit export and extract body string
   2) replace unicode (\u1234) and escapes (\n or \") with actual unicode/control characters
   3) split to words (keep apostrophed words like can't or can\u2019t)
   4) for 'en' dictitonary drop words with unicode characters in it except \u2019 (maybe other?)
   5) compute freqency of words -> value
   6) reduce: remove words found in other words (affect value: avg, sum or max?)
   7) clamp: delete low values words, keep only reasonable amount of high-value words
   Z) combine: to one long string, asc sorting by value, with removing words found inside the newly combined string
 - evaluate gains of shuffling various similarly-valued words in order to 
 - compress initial bodies with established dictionary, report results, try different dictionaries, compare results

historical data replay flooding protection in raddi::db::classify case
 - start rejecting old entries from connection that we did not asked (connection->history_extension)

sane coordinator status display
more info into overview

move connection::request_limiter to separate class

connection members will probably need locking to protect from early deletion when retired

old data deletion (whole shards?) except 'retained' channels/threads

coordinator: congestion control
coordinator: small random delay to sends to harden agains origin analysis -> connection.send
connection::send -> prioritization and delay support
coordinator: support for 'flags' 0x0001 (detail request) in channel/identites history and subscriptions history

merge raddi::detached, raddi::noticed and raddi::subscriptions
 - maybe one base template with 3 specializations

split raddi stuff from node.cpp to raddi_node.cpp
 - rename node.cpp to node_win.cpp and keep all Win32/service stuff there

rewrite log as noted in log.cpp or somewhere there in comment

SETTINGS GUIDE: settings for most privacy concerned users, first run (proxy, tor, listeners, xor-mask)
SETTINGS GUIDE: running multiple nodes on single machine

TBD app: https://msdn.microsoft.com/en-us/library/aa767914(VS.85).aspx#app_reg
TBD ext: raddi://a29e7568b5da6a-b5e418[.txt/.html/.xml/.md]
TBD ext: raddi://a29e7568b5da6a-b5e418/[1/2/3/...][.jpg/.png/.zip/...]
TBD www - read-only web interface

common/string.h
 - string with platform-defined internal representation
   (UTF-16 on Windows, UTF-8 on Linux), auto converting
 - use for paths and everything
    - options?
    - node.cpp/raddi.com.cpp -> main args?

consider http server? simple GET/POST support
 - replace Source functionality?
 - POST - new identity/channel/post/etc.
 - GET - db queries? lists of identities/channels
       - deep tree data fetch?
       - get node status (for status button/iframe on website)

document protocol
 - requirement: synchronized time

UCRT?
 - https://blogs.msdn.microsoft.com/vcblog/2015/03/03/introducing-the-universal-crt/
 - https://github.com/MicrosoftDocs/cpp-docs/blob/master/docs/c-runtime-library/crt-library-features.md
